===========================================================================
MyInteger:::OBJECT
this.value == 0
===========================================================================
MyInteger..ctor(System.Int32 x):::ENTER
x == 0
===========================================================================
MyInteger..ctor(System.Int32 x):::EXIT
this.value == orig(x)
===========================================================================
StackAr:::OBJECT
this.theArray.GetType() == System.Object[].class
this.theArray[].GetType() one of { [], [MyInteger, MyInteger, System.Object, MyInteger] }
===========================================================================
StackAr..ctor(System.Int32 capacity):::ENTER
capacity one of { 0, 4 }
===========================================================================
StackAr..ctor(System.Int32 capacity):::EXIT
this.theArray[] elements == null
this.theArray[].GetType() == []
this.topOfStack == -1
===========================================================================
StackAr.isEmpty():::ENTER
this.theArray != null
this.theArray[].GetType() == [MyInteger, MyInteger, System.Object, MyInteger]
===========================================================================
StackAr.isEmpty():::EXIT6
(return == false)  <==>  (this.topOfStack >= 0)
(return == false)  ==>  (this.theArray[].GetType() == [MyInteger, MyInteger, System.Object, MyInteger])
(return == true)  <==>  (this.topOfStack == -1)
(return == true)  ==>  (this.theArray[] contains only nulls and has only one value, of length 4)
===========================================================================
StackAr.isEmpty():::EXIT6;condition="return == true"
===========================================================================
StackAr.isEmpty():::EXIT6;condition="not(return == true)"
===========================================================================
StackAr.isEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
(return == false)  <==>  (this.topOfStack >= 0)
(return == false)  ==>  (this.theArray[].GetType() == [MyInteger, MyInteger, System.Object, MyInteger])
(return == true)  <==>  (this.topOfStack == -1)
(return == true)  ==>  (this.theArray[] contains only nulls and has only one value, of length 4)
this.theArray != null
this.theArray[].GetType() == [MyInteger, MyInteger, System.Object, MyInteger]
this.theArray.GetType() == orig(this.theArray.GetType())
===========================================================================
StackAr.isEmpty():::EXIT;condition="return == true"
return == true
this.theArray[] contains only nulls and has only one value, of length 4
this.topOfStack == -1
===========================================================================
StackAr.isEmpty():::EXIT;condition="not(return == true)"
return == false
this.topOfStack >= 0
===========================================================================
StackAr.isFull():::ENTER
this.theArray[].GetType() == [MyInteger, MyInteger, System.Object, MyInteger]
===========================================================================
StackAr.isFull():::EXIT11
(return == false)  <==>  (this.topOfStack <= 2)
(return == false)  ==>  (this.theArray != null)
(return == false)  ==>  (this.topOfStack >= -1)
(return == true)  <==>  (this.topOfStack == 3)
(return == true)  ==>  (orig(this) has only one value)
(return == true)  ==>  (this.theArray has only one value)
(return == true)  ==>  (this.theArray[] contains no nulls and has only one value, of length 4)
(return == true)  ==>  (this.theArray[].GetType() == [MyInteger, MyInteger, System.Object, MyInteger])
===========================================================================
StackAr.isFull():::EXIT11;condition="return == true"
===========================================================================
StackAr.isFull():::EXIT11;condition="not(return == true)"
===========================================================================
StackAr.isFull():::EXIT
this.theArray == orig(this.theArray)
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
(return == false)  <==>  (this.topOfStack <= 2)
(return == false)  ==>  (this.theArray != null)
(return == false)  ==>  (this.topOfStack >= -1)
(return == true)  <==>  (this.topOfStack == 3)
(return == true)  ==>  (orig(this) has only one value)
(return == true)  ==>  (this.theArray has only one value)
(return == true)  ==>  (this.theArray[] contains no nulls and has only one value, of length 4)
(return == true)  ==>  (this.theArray[].GetType() == [MyInteger, MyInteger, System.Object, MyInteger])
this.theArray[].GetType() == [MyInteger, MyInteger, System.Object, MyInteger]
this.theArray.GetType() == orig(this.theArray.GetType())
===========================================================================
StackAr.isFull():::EXIT;condition="return == true"
return == true
this.theArray has only one value
this.theArray[] contains no nulls and has only one value, of length 4
this.topOfStack == 3
orig(this) has only one value
===========================================================================
StackAr.isFull():::EXIT;condition="not(return == true)"
return == false
this.theArray != null
this.topOfStack <= 2
this.topOfStack >= -1
===========================================================================
StackAr.makeEmpty():::ENTER
this.theArray[].GetType() == [MyInteger, MyInteger, System.Object, MyInteger]
this.topOfStack one of { -1, 2, 3 }
===========================================================================
StackAr.makeEmpty():::EXIT27
===========================================================================
StackAr.makeEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray[] contains only nulls and has only one value, of length 4
this.topOfStack == -1
this.theArray.GetType() == orig(this.theArray.GetType())
===========================================================================
StackAr.push(System.Object x):::ENTER
this.theArray.GetType() != x.GetType()
===========================================================================
StackAr.push(System.Object x):::EXIT23
===========================================================================
StackAr.push(System.Object x):::EXIT
this.theArray == orig(this.theArray)
this.theArray[].GetType() == [MyInteger, MyInteger, System.Object, MyInteger]
this.theArray.GetType() == orig(this.theArray.GetType())
this.theArray.GetType() != orig(x.GetType())
orig(x) in this.theArray[]
orig(x.GetType()) in this.theArray[].GetType()
this.topOfStack - orig(this.topOfStack) - 1 == 0
===========================================================================
StackAr.top():::ENTER
this.theArray != null
this.theArray[].GetType() == [MyInteger, MyInteger, System.Object, MyInteger]
===========================================================================
StackAr.top():::EXIT10
return == null
this.theArray[] contains only nulls and has only one value, of length 4
this.topOfStack == -1
===========================================================================
StackAr.top():::EXIT17
return in this.theArray[]
===========================================================================
StackAr.top():::EXIT
this.theArray == orig(this.theArray)
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray != null
this.theArray[].GetType() == [MyInteger, MyInteger, System.Object, MyInteger]
return.GetType() != this.theArray.GetType()
return.GetType() in this.theArray[].GetType()
this.theArray.GetType() == orig(this.theArray.GetType())
===========================================================================
StackAr.topAndPop():::ENTER
this.theArray[] contains only nulls and has only one value, of length 4
this.topOfStack == -1
===========================================================================
StackAr.topAndPop():::EXIT10
===========================================================================
StackAr.topAndPop():::EXIT
this.theArray == orig(this.theArray)
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
return == null
this.theArray[] contains only nulls and has only one value, of length 4
this.topOfStack == -1
this.theArray.GetType() == orig(this.theArray.GetType())
===========================================================================
StackArTester..cctor():::ENTER
StackArTester.rnd == null
StackArTester.s == null
===========================================================================
StackArTester..cctor():::EXIT6
===========================================================================
StackArTester..cctor():::EXIT
StackArTester.rnd has only one value
StackArTester.rnd.GetType() == System.Random.class
StackArTester.s has only one value
StackArTester.s.theArray has only one value
StackArTester.s.theArray[] == []
StackArTester.s.topOfStack == -1
===========================================================================
StackArTester.Main(System.String[] args):::ENTER
StackArTester.rnd has only one value
StackArTester.rnd.GetType() == System.Random.class
StackArTester.s has only one value
StackArTester.s.theArray has only one value
StackArTester.s.theArray[] == []
StackArTester.s.topOfStack == -1
args has only one value
args[] == []
args[].ToString() == []
===========================================================================
StackArTester.Main(System.String[] args):::EXIT4
===========================================================================
StackArTester.Main(System.String[] args):::EXIT
StackArTester.rnd == orig(StackArTester.rnd)
StackArTester.s.topOfStack == orig(StackArTester.s.topOfStack)
args[] == orig(args[])
StackArTester.rnd has only one value
StackArTester.rnd.GetType() == System.Random.class
StackArTester.s has only one value
StackArTester.s.theArray has only one value
StackArTester.s.theArray[] contains only nulls and has only one value, of length 4
StackArTester.s.topOfStack == -1
args[] == []
args[].ToString() == []
StackArTester.rnd.GetType() == orig(StackArTester.rnd.GetType())
===========================================================================
StackArTester.doNew(System.Int32 size):::ENTER
StackArTester.rnd has only one value
StackArTester.rnd.GetType() == System.Random.class
StackArTester.s.theArray[] elements == null
StackArTester.s.topOfStack == -1
size == 4
===========================================================================
StackArTester.doNew(System.Int32 size):::EXIT11
===========================================================================
StackArTester.doNew(System.Int32 size):::EXIT
StackArTester.rnd == orig(StackArTester.rnd)
StackArTester.s.topOfStack == orig(StackArTester.s.topOfStack)
StackArTester.rnd has only one value
StackArTester.rnd.GetType() == System.Random.class
StackArTester.s.theArray[] contains only nulls and has only one value, of length 4
StackArTester.s.topOfStack == -1
StackArTester.rnd.GetType() == orig(StackArTester.rnd.GetType())
orig(StackArTester.s.theArray[]) is a subsequence of StackArTester.s.theArray[]
===========================================================================
StackArTester.fill(System.Int32 n):::ENTER
StackArTester.rnd has only one value
StackArTester.rnd.GetType() == System.Random.class
StackArTester.s has only one value
StackArTester.s.theArray has only one value
StackArTester.s.theArray[] == []
StackArTester.s.topOfStack == -1
n == 4
===========================================================================
StackArTester.fill(System.Int32 n):::EXIT86
===========================================================================
StackArTester.fill(System.Int32 n):::EXIT
StackArTester.rnd == orig(StackArTester.rnd)
StackArTester.s.topOfStack == orig(StackArTester.s.topOfStack)
StackArTester.rnd has only one value
StackArTester.rnd.GetType() == System.Random.class
StackArTester.s has only one value
StackArTester.s.theArray has only one value
StackArTester.s.theArray[] contains only nulls and has only one value, of length 4
StackArTester.s.topOfStack == -1
StackArTester.rnd.GetType() == orig(StackArTester.rnd.GetType())
===========================================================================
StackArTester.observe():::ENTER
StackArTester.rnd has only one value
StackArTester.rnd.GetType() == System.Random.class
StackArTester.s != null
StackArTester.s.theArray != null
StackArTester.s.topOfStack >= -1
===========================================================================
StackArTester.observe():::EXIT10
===========================================================================
StackArTester.observe():::EXIT
StackArTester.rnd == orig(StackArTester.rnd)
StackArTester.s == orig(StackArTester.s)
StackArTester.s.theArray == orig(StackArTester.s.theArray)
StackArTester.s.theArray[] == orig(StackArTester.s.theArray[])
StackArTester.s.topOfStack == orig(StackArTester.s.topOfStack)
StackArTester.rnd has only one value
StackArTester.rnd.GetType() == System.Random.class
StackArTester.s != null
StackArTester.s.theArray != null
StackArTester.s.topOfStack >= -1
StackArTester.rnd.GetType() == orig(StackArTester.rnd.GetType())
===========================================================================
StackArTester.push():::ENTER
StackArTester.rnd has only one value
StackArTester.rnd.GetType() == System.Random.class
StackArTester.s has only one value
StackArTester.s.theArray has only one value
===========================================================================
StackArTester.push():::EXIT24
===========================================================================
StackArTester.push():::EXIT
StackArTester.rnd == orig(StackArTester.rnd)
StackArTester.s == orig(StackArTester.s)
StackArTester.s.theArray == orig(StackArTester.s.theArray)
StackArTester.rnd has only one value
StackArTester.rnd.GetType() == System.Random.class
StackArTester.s has only one value
StackArTester.s.theArray has only one value
StackArTester.rnd.GetType() == orig(StackArTester.rnd.GetType())
StackArTester.s.topOfStack - orig(StackArTester.s.topOfStack) - 1 == 0
===========================================================================
StackArTester.topOrPop():::ENTER
StackArTester.rnd has only one value
StackArTester.rnd.GetType() == System.Random.class
StackArTester.s.theArray[] contains only nulls and has only one value, of length 4
StackArTester.s.topOfStack == -1
===========================================================================
StackArTester.topOrPop():::EXIT34
===========================================================================
StackArTester.topOrPop():::EXIT
StackArTester.rnd == orig(StackArTester.rnd)
StackArTester.s == orig(StackArTester.s)
StackArTester.s.theArray == orig(StackArTester.s.theArray)
StackArTester.s.theArray[] == orig(StackArTester.s.theArray[])
StackArTester.s.topOfStack == orig(StackArTester.s.topOfStack)
StackArTester.rnd has only one value
StackArTester.rnd.GetType() == System.Random.class
StackArTester.s.theArray[] contains only nulls and has only one value, of length 4
StackArTester.s.topOfStack == -1
StackArTester.rnd.GetType() == orig(StackArTester.rnd.GetType())
