===========================================================================
Generics.BaseNodeMultiple`2:::OBJECT
===========================================================================
Generics.BaseNodeMultiple`2..ctor(T t, U u):::ENTER
===========================================================================
Generics.BaseNodeMultiple`2..ctor(T t, U u):::EXIT
this.t == orig(t)
this.u == orig(u)
this.t.GetType() == orig(t.GetType())
this.u.GetType() == orig(u.GetType())
===========================================================================
Generics.DelegateTestClass:::OBJECT
this has only one value
this.GetType() == DelegateTestClass.class
===========================================================================
Generics.DelegateTestClass..ctor():::EXIT
===========================================================================
Generics.DelegateTestStack`1:::OBJECT
this has only one value
this.GetType() == DelegateTestStack<double>.class
===========================================================================
Generics.DelegateTestStack`1..ctor():::EXIT
===========================================================================
Generics.DelegateTestStack`1.add_stackEvent(Generics.StackEventHandler`2<Generics.DelegateTestStack`1<T>, Generics.DelegateTestStack`1<T>.StackEventArgs> value):::ENTER
value has only one value
value._methodBase == null
value._methodPtr has only one value
value._methodPtrAux == null
value._target has only one value
value._target.GetType() == DelegateTestClass.class
===========================================================================
Generics.DelegateTestStack`1.add_stackEvent(Generics.StackEventHandler`2<Generics.DelegateTestStack`1<T>, Generics.DelegateTestStack`1<T>.StackEventArgs> value):::EXIT24
===========================================================================
Generics.DelegateTestStack`1.add_stackEvent(Generics.StackEventHandler`2<Generics.DelegateTestStack`1<T>, Generics.DelegateTestStack`1<T>.StackEventArgs> value):::EXIT
value._methodBase == orig(value._methodBase)
value._methodPtr == orig(value._methodPtr)
value._methodPtrAux == orig(value._methodPtrAux)
value._target == orig(value._target)
value._methodBase == null
value._methodPtr has only one value
value._methodPtrAux == null
value._target has only one value
value._target.GetType() == DelegateTestClass.class
===========================================================================
Generics.GenericList`1:::OBJECT
this.head.GetType() == GenericList<int>.Node.class
===========================================================================
Generics.GenericList`1..ctor():::EXIT
this.head == null
===========================================================================
Generics.GenericList`1.AddHead(T t):::ENTER
t.GetType() == int.class
this has only one value
this.GetType() == GenericList<int>.class
t.GetType() != this.head.GetType()
this.GetType() != this.head.GetType()
===========================================================================
Generics.GenericList`1.AddHead(T t):::EXIT12
===========================================================================
Generics.GenericList`1.AddHead(T t):::EXIT
this.head.data == orig(t)
this.head.next == orig(this.head)
this.head.GetType() == orig(this.head.GetType())
===========================================================================
Generics.GenericList`1.GetEnumerator():::ENTER
this has only one value
this.GetType() == GenericList<int>.class
this.head has only one value
this.head.data has only one value
this.head.next has only one value
===========================================================================
Generics.GenericList`1.GetEnumerator():::EXIT8
===========================================================================
Generics.GenericList`1.GetEnumerator():::EXIT
this.head == orig(this.head)
this.head.data == orig(this.head.data)
this.head.next == orig(this.head.next)
return has only one value
return.GetType() == GenericList<int>.<GetEnumerator>d__0.class
this.head has only one value
this.head.data has only one value
this.head.next has only one value
===========================================================================
Generics.GenericList`1.GetLast():::ENTER
this.head == null
===========================================================================
Generics.GenericList`1.GetLast():::EXIT25
===========================================================================
Generics.GenericList`1.GetLast():::EXIT
this.head == orig(this.head)
return == null
return.GetType() == int.class
this.head == null
===========================================================================
Generics.GenericList`1.Node:::OBJECT
this.GetType() == GenericList<int>.Node.class
this.data.GetType() == int.class
this.next.GetType() == GenericList<int>.Node.class
this.GetType() == this.next.GetType()
this.data.GetType() != this.next.GetType()
===========================================================================
Generics.GenericList`1.Node..ctor(T t):::ENTER
t.GetType() == int.class
===========================================================================
Generics.GenericList`1.Node..ctor(T t):::EXIT
this.data == orig(t)
this.next == null
this.data.GetType() == orig(t.GetType())
===========================================================================
Generics.GenericList`1.Node.Data.get():::ENTER
===========================================================================
Generics.GenericList`1.Node.Data.get():::EXIT4
===========================================================================
Generics.GenericList`1.Node.Data.get():::EXIT
return == this.data
this.data == orig(this.data)
this.next == orig(this.next)
this.next.data == orig(this.next.data)
this.next.next == orig(this.next.next)
return.GetType() == int.class
return.GetType() == this.data.GetType()
return.GetType() != this.next.GetType()
return.GetType() == orig(this.data.GetType())
this.next.GetType() == orig(this.GetType())
this.next.GetType() == orig(this.next.GetType())
===========================================================================
Generics.GenericList`1.Node.Next.get():::ENTER
===========================================================================
Generics.GenericList`1.Node.Next.get():::EXIT4
===========================================================================
Generics.GenericList`1.Node.Next.get():::EXIT
return == this.next
return == orig(this.next)
return.data == this.next.data
return.data == orig(this.next.data)
return.next == this.next.next
return.next == orig(this.next.next)
this.data == orig(this.data)
return.GetType() == GenericList<int>.Node.class
return.data.GetType() == int.class
return.next.GetType() == GenericList<int>.Node.class
return.GetType() != return.data.GetType()
return.GetType() == return.next.GetType()
return.GetType() != this.data.GetType()
return.GetType() == this.next.GetType()
return.GetType() == orig(this.GetType())
return.GetType() == orig(this.next.GetType())
return.data.GetType() != return.next.GetType()
return.data.GetType() == this.data.GetType()
return.data.GetType() != orig(this.GetType())
return.next.GetType() != this.data.GetType()
return.next.GetType() == orig(this.GetType())
this.data.GetType() == orig(this.data.GetType())
===========================================================================
Generics.GenericList`1.Node.Next.set(Generics.GenericList`1<T>.Node value):::ENTER
this.next == null
value.GetType() == GenericList<int>.Node.class
value.data.GetType() == int.class
value.next.GetType() == GenericList<int>.Node.class
this.GetType() == value.GetType()
this.GetType() != value.data.GetType()
this.GetType() == value.next.GetType()
this.data.GetType() != value.GetType()
this.data.GetType() == value.data.GetType()
this.data.GetType() != value.next.GetType()
value.GetType() != value.data.GetType()
value.GetType() == value.next.GetType()
value.data.GetType() != value.next.GetType()
===========================================================================
Generics.GenericList`1.Node.Next.set(Generics.GenericList`1<T>.Node value):::EXIT4
===========================================================================
Generics.GenericList`1.Node.Next.set(Generics.GenericList`1<T>.Node value):::EXIT
this.data == orig(this.data)
this.next == orig(value)
this.next.data == value.data
this.next.next == value.next
value.data == orig(value.data)
value.next == orig(value.next)
value.next.data == orig(value.next.data)
value.next.next == orig(value.next.next)
value.data.GetType() == int.class
value.next.GetType() == GenericList<int>.Node.class
this.data.GetType() == value.data.GetType()
this.data.GetType() != value.next.GetType()
this.data.GetType() == orig(this.data.GetType())
this.next.GetType() != value.data.GetType()
this.next.GetType() == value.next.GetType()
this.next.GetType() == orig(this.GetType())
this.next.GetType() == orig(value.GetType())
value.data.GetType() != value.next.GetType()
value.data.GetType() != orig(this.GetType())
value.data.GetType() == orig(value.data.GetType())
value.next.GetType() == orig(this.GetType())
value.next.GetType() == orig(value.next.GetType())
===========================================================================
Generics.GenericsTest.AddToList1(System.Collections.Generic.List`1<System.Int32> intList1):::ENTER
intList1 has only one value
intList1[] == []
===========================================================================
Generics.GenericsTest.AddToList1(System.Collections.Generic.List`1<System.Int32> intList1):::EXIT13
===========================================================================
Generics.GenericsTest.AddToList1(System.Collections.Generic.List`1<System.Int32> intList1):::EXIT
intList1[] == [1, 2, 3]
===========================================================================
Generics.GenericsTest.PickSmaller(T a, T b, T smaller):::ENTER
a has only one value
a.GetType() == int.class
b has only one value
smaller == null
a.GetType() == b.GetType()
a.GetType() == smaller.GetType()
===========================================================================
Generics.GenericsTest.PickSmaller(T a, T b, T smaller):::EXIT23
===========================================================================
Generics.GenericsTest.PickSmaller(T a, T b, T smaller):::EXIT
===========================================================================
Generics.GenericsTest.Swap(System.Collections.Generic.List`1<T> list1, System.Collections.Generic.List`1<T> list2):::ENTER
list1 has only one value
list1.GetType() == List<object>.class
list1[] contains no nulls and has only one value, of length 3
list1[].GetType() == [int, int, int]
list2 has only one value
list2[] contains no nulls and has only one value, of length 3
===========================================================================
Generics.GenericsTest.Swap(System.Collections.Generic.List`1<T> list1, System.Collections.Generic.List`1<T> list2):::EXIT18
===========================================================================
Generics.GenericsTest.Swap(System.Collections.Generic.List`1<T> list1, System.Collections.Generic.List`1<T> list2):::EXIT
list1[] == orig(list2[])
list2[] == orig(list1[])
list1[] contains no nulls and has only one value, of length 3
list1[].GetType() == [int, int, int]
list2[] contains no nulls and has only one value, of length 3
===========================================================================
Generics.GenericsTest.SwapIfGreater(T lhs, T rhs):::ENTER
lhs has only one value
lhs.GetType() == int.class
rhs has only one value
===========================================================================
Generics.GenericsTest.SwapIfGreater(T lhs, T rhs):::EXIT25
===========================================================================
Generics.GenericsTest.SwapIfGreater(T lhs, T rhs):::EXIT
===========================================================================
Generics.Node4`1:::OBJECT
this.GetType() == Node4<string>.class
===========================================================================
Generics.Node4`1..ctor(T t, System.Int32 i):::ENTER
i one of { 4, 5 }
t.GetType() == string.class
===========================================================================
Generics.Node4`1..ctor(T t, System.Int32 i):::EXIT
===========================================================================
Generics.Node5`2:::OBJECT
===========================================================================
Generics.Node5`2..ctor(T t, U u):::ENTER
===========================================================================
Generics.Node5`2..ctor(T t, U u):::EXIT
===========================================================================
Generics.NodeItem`1:::OBJECT
this has only one value
this.GetType() == NodeItem<DelegateTestExampleClass>.class
===========================================================================
Generics.NodeItem`1..ctor():::EXIT
